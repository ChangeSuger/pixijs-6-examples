---
import DocLayout from "@/layout/DocLayout.astro";

import { Code } from '@astrojs/starlight/components';

const exampleCode = `
import * as PIXI from 'pixi.js';

const app = new PIXI.Application({ width: 800, height: 600 });
const pixiContainer = document.getElementById('pixi-container')!;
pixiContainer.appendChild(app.view);

const container = new PIXI.Container();
container.width = app.screen.width;
container.height = app.screen.height;
app.stage.addChild(container);

// 创建一个精灵，模拟电视屏幕
const screen = new PIXI.Sprite(PIXI.Texture.WHITE);
screen.width = app.screen.width;
screen.height = app.screen.height;
container.addChild(screen);
let count = 0;
const tvNoiseSpeed = 5;

app.ticker.add(delta => {
  count += delta;
  if (count >= tvNoiseSpeed) {
    // 创建并应用噪点滤镜
    const noiseFilter = new PIXI.filters.NoiseFilter();
    noiseFilter.noise = 5; // 控制雪花噪点的强度
    const blurFilter = new PIXI.filters.BlurFilter();
    blurFilter.blur = 0.5;
    const fxaaFilter = new PIXI.filters.FXAAFilter();
    screen.filters = [noiseFilter, blurFilter, fxaaFilter];
    count %= tvNoiseSpeed;
  }
});

const mask = new PIXI.Graphics();
mask.beginFill(0x000000);
mask.drawRect(0, 0, app.screen.width, app.screen.height / 4);
mask.drawRect(0, app.screen.height - app.screen.height / 4, app.screen.width, app.screen.height / 4);
mask.drawRect(0, 0, app.screen.width / 4, app.screen.height);
mask.drawRect(app.screen.width - app.screen.width / 4, 0, app.screen.width / 4, app.screen.height);
mask.endFill();
container.addChild(mask);
mask.filters = [new PIXI.filters.AlphaFilter(0.3), new PIXI.filters.BlurFilter(50)];

const bar = new PIXI.Graphics();
bar.beginFill(0x000000);
bar.drawRect(-app.screen.width / 2, -app.screen.height / 2, app.screen.width * 2, app.screen.height / 6);
bar.drawRect(-app.screen.width / 2, -app.screen.height * 3 / 2, app.screen.width * 2, app.screen.height / 12);
bar.drawRect(-app.screen.width / 2, -app.screen.height * 5 / 2, app.screen.width * 2, app.screen.height / 3);
bar.endFill();
bar.filters = [new PIXI.filters.AlphaFilter(0.3), new PIXI.filters.BlurFilter(5)];
container.addChild(bar);

app.ticker.add(delta => {
  bar.y += delta * 10;
  if (bar.y > app.screen.height * 3.5) {
    bar.y = 0;
  }
});
`;
---

<DocLayout title="实战-电视机雪花特效">
  <div id="pixi-container" class="w-full"></div>
  <Code code={exampleCode} lang="js" title="示例代码" />
</DocLayout>

<script>
import * as PIXI from 'pixi.js';

const app = new PIXI.Application({ width: 800, height: 600 });
const pixiContainer = document.getElementById('pixi-container')!;
pixiContainer.appendChild(app.view);

const container = new PIXI.Container();
app.stage.addChild(container);

// 创建一个精灵，模拟电视屏幕
const screen = new PIXI.Sprite(PIXI.Texture.WHITE);
screen.width = app.screen.width;
screen.height = app.screen.height;
container.addChild(screen);
let count = 0;
const tvNoiseSpeed = 5;

app.ticker.add(delta => {
  count += delta;
  if (count >= tvNoiseSpeed) {
    // 创建并应用噪点滤镜
    const noiseFilter = new PIXI.filters.NoiseFilter();
    noiseFilter.noise = 5; // 控制雪花噪点的强度
    const blurFilter = new PIXI.filters.BlurFilter();
    blurFilter.blur = 0.5;
    const fxaaFilter = new PIXI.filters.FXAAFilter();
    screen.filters = [noiseFilter, blurFilter, fxaaFilter];
    count %= tvNoiseSpeed;
  }
});

const mask = new PIXI.Graphics();
mask.beginFill(0x000000);
mask.drawRect(0, 0, app.screen.width, app.screen.height / 4);
mask.drawRect(0, app.screen.height - app.screen.height / 4, app.screen.width, app.screen.height / 4);
mask.drawRect(0, 0, app.screen.width / 4, app.screen.height);
mask.drawRect(app.screen.width - app.screen.width / 4, 0, app.screen.width / 4, app.screen.height);
mask.endFill();
container.addChild(mask);
mask.filters = [new PIXI.filters.AlphaFilter(0.3), new PIXI.filters.BlurFilter(50)];

const bar = new PIXI.Graphics();
bar.beginFill(0x000000);
bar.drawRect(-app.screen.width / 2, -app.screen.height / 2, app.screen.width * 2, app.screen.height / 6);
bar.drawRect(-app.screen.width / 2, -app.screen.height * 3 / 2, app.screen.width * 2, app.screen.height / 12);
bar.drawRect(-app.screen.width / 2, -app.screen.height * 5 / 2, app.screen.width * 2, app.screen.height / 3);
bar.endFill();
bar.filters = [new PIXI.filters.AlphaFilter(0.3), new PIXI.filters.BlurFilter(5)];
container.addChild(bar);

app.ticker.add(delta => {
  bar.y += delta * 10;
  if (bar.y > app.screen.height * 3.5) {
    bar.y = 0;
  }
});
</script>
